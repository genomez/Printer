# including some common overrides, feel free to change these to your liking

[virtual_sdcard]
forced_leveling: false

[bed_mesh]
probe_count:50,50
mesh_min: 5,5
mesh_max: 345,335
adaptive_margin: 10
move_check_distance: 1
speed:250
[gcode_macro _START_PRINT_VARS]
variable_heat_soak: 0 # minutes
variable_offset_PETG: 0.005#.02#5
variable_offset_ABS: 0
variable_offset_ASA: 0
variable_offset_PLA: 0.00
variable_offset_DEFAULT: .00
[firmware_retraction]
retract_length: 0.8
unretract_extra_length: 0
retract_speed: 40
unretract_speed: 40


# Helper macro for combined status messages
[gcode_macro STATUS_MSG]
gcode:
  {% set MESSAGE = params.MSG|default('')|string %}
  M117 {MESSAGE}
  RESPOND MSG="{MESSAGE}"

[gcode_macro START_PRINT]
gcode:
  STATUS_MSG MSG="Starting print preparation..."

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  {% set EXTRUDER_WAITTEMP = 140 %}
  {% set MATERIAL = params.MATERIAL|default('')|string %}
  {% set SOAK_TIME = params.SOAK_TIME|default(printer['gcode_macro _START_PRINT_VARS'].heat_soak)|float %}

  STATUS_MSG MSG="Setting bed to {BED_TEMP}°C..."
  M140 S{BED_TEMP}
  
  {% if CHAMBER_TEMP > 0 %}
    STATUS_MSG MSG="Setting chamber to {CHAMBER_TEMP}°C..."
    M141 S{CHAMBER_TEMP}
  {% endif %}

  {% set key = "offset_" + MATERIAL|lower %}
  {% set OFFSET = printer['gcode_macro _START_PRINT_VARS'][key] 
    if key in printer['gcode_macro _START_PRINT_VARS'] 
    else printer['gcode_macro _START_PRINT_VARS'].offset_default %}
  STATUS_MSG MSG="Setting Z offset for {MATERIAL} of {OFFSET}..."
  SET_GCODE_OFFSET Z={OFFSET}
  
  STATUS_MSG MSG="Homing if needed..."
  HOME_IF_NEEDED
  
  STATUS_MSG MSG="Waiting for bed to reach {BED_TEMP}°C..."
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-0.5} MAXIMUM={BED_TEMP+1}

  # soak countdown
  STATUS_MSG MSG="SOAK_TIME is {SOAK_TIME}"
  {% if SOAK_TIME > 0 %}
    {% set TOTAL_SECONDS = (SOAK_TIME * 60) | int %}
    {% for i in range(0, TOTAL_SECONDS, 15) %}
      {% set COUNTDOWN = TOTAL_SECONDS - i %}
      STATUS_MSG MSG="Soaking: {COUNTDOWN // 60} min {COUNTDOWN % 60} sec left"
      {% if COUNTDOWN > 15 %}
        G4 P15000  ; Wait 15 seconds
      {% else %}
        G4 P{COUNTDOWN * 1000}  ; Wait remaining seconds
      {% endif %}
    {% endfor %}
    STATUS_MSG MSG="Soak complete!"
  {% endif %}
  STATUS_MSG MSG="Rehoming Z after reaching bedtemp/soak"
  G28 Z

  STATUS_MSG MSG="Performing initial setup(BOX_START_PRINT)"
  BOX_START_PRINT
  G90
  STATUS_MSG MSG="Setting extruder to {EXTRUDER_WAITTEMP}°C..."
  M104 S{EXTRUDER_WAITTEMP}
  STATUS_MSG MSG="Adjusting bed tilt..."
  Z_TILT_ADJUST
  
  # Carto/pr touch mesh
  STATUS_MSG MSG="Handling bed mesh..."
  {% if printer.scanner %}
    STATUS_MSG MSG="Carto meshing bed"
    BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1
    STATUS_MSG MSG="Setting Z offset with carto after nozzle clean..."
    BOX_NOZZLE_CLEAN
    CARTOGRAPHER_TOUCH
  {% else %}
    MESH_IF_NEEDED BED_TEMP={BED_TEMP} CHAMBER_TEMP={CHAMBER_TEMP}
    {% set mesh_name = "{BED_TEMP}c_{CHAMBER_TEMP}c" %}
    STATUS_MSG MSG="Loading bed mesh: {mesh_name}..."
    BED_MESH_PROFILE LOAD={mesh_name}
  {% endif %}
  
  STATUS_MSG MSG="Moving to extrude box"
  BOX_GO_TO_EXTRUDE_POS
  
  {% if CHAMBER_TEMP > 0 %}
    STATUS_MSG MSG="Waiting for chamber to reach {CHAMBER_TEMP}°C..."
    M191 S{CHAMBER_TEMP}
  {% endif %}

  STATUS_MSG MSG="Preparing print vars"
  M220 S100
  G21
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000 SQUARE_CORNER_VELOCITY=10
  G92 E0

  STATUS_MSG MSG="Start_Print macro has finished,"
[gcode_macro HOME_IF_NEEDED]
description: Homes axes when needed
gcode:
  {% set homed = printer.toolhead.homed_axes %}
  
  {% if "z" not in homed %}
    G28 Z
  {% elif "x" not in homed or "y" not in homed %}
    G28 X Y
  {% else %}
    {action_respond_info("All axes already homed")}
  {% endif %}
[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_BASE
gcode:
    {% set SENSOR = params.SENSOR|default('extruder') %}
    {% set MIN = params.MINIMUM|float %}
    {% set MAX = params.MAXIMUM|default(MIN + 10)|float %}

    {% set is_extruder = ('extruder' in SENSOR) %}
    {% set is_bed = (SENSOR == 'heater_bed') %}
    {% set can_check_target = is_extruder or is_bed %}

    {% set target = 0.0 %}
    {% if can_check_target %}
        {% set target = printer[SENSOR].target|float %}
    {% endif %}

    {% set skip = can_check_target and (target < MIN) %}

    {% if skip %}
        M118 TEMPERATURE_WAIT skipped: MIN={MIN}°C, MAX={MAX}°C; {SENSOR} target is {target|round(1)}°C
    {% else %}
        M118 Waiting for {SENSOR} to reach temperature range: {MIN}°C - {MAX}°C
        TEMPERATURE_WAIT_BASE {rawparams}

        {% if is_extruder or is_bed %}
            _ENSURE_TEMP SENSOR={SENSOR} MIN={MIN} MAX={MAX}
        {% endif %}

        {% if is_extruder and printer[SENSOR].target|float >= 200 %}
            HOME_IF_NEEDED  # just incase because box clean has no home checks
            BOX_NOZZLE_CLEAN
        {% endif %}
    {% endif %}
[gcode_macro _ENSURE_TEMP]
gcode:
    {% if params.SENSOR in printer %}
        {% set current_temp = printer[params.SENSOR].temperature %}
        {% set min_temp = params.MIN|float %}
        {% set max_temp = params.MAX|float %}
        {% set target_temp = printer[params.SENSOR].target %}
        
        {% if current_temp >= min_temp and current_temp <= max_temp %}
            {% set temp_diff = (current_temp - target_temp)|round(1) %}
            M118 Wait complete. Current temperature ({current_temp|round(1)}°C) is within range ({temp_diff} degrees off TARGET). ✅
        {% else %}
            M118 ⚠️WARNING: Wait finished, but temp is OUT OF RANGE! Current: {current_temp|round(1)}°C | Target: {min_temp}°C - {max_temp}°C ⚠️

            {% if 'extruder' in params.SENSOR %}
                M118 Using M109 to set {params.SENSOR} to {target_temp}°C
                M109 S{target_temp}
                M118 M109 complete
            {% elif params.SENSOR == 'heater_bed' %}
                M118 Using M190 to set heater_bed to {target_temp}°C
                M190 S{target_temp}
                M118 M190 complete
            {% endif %}
        {% endif %}
    {% else %}
        M118 Error: Sensor '{params.SENSOR}' not found.
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG
gcode:
    # Set custom values before calibration
    SET_VELOCITY_LIMIT VELOCITY=800 SQUARE_CORNER_VELOCITY=5 ACCEL=15000 ACCEL_TO_DECEL=5000
    # Run bed mesh calibration
    BED_MESH_CALIBRATE_ORIG {rawparams}
    # Set specified values after calibration
    SET_VELOCITY_LIMIT VELOCITY=800 SQUARE_CORNER_VELOCITY=10 ACCEL=30000 ACCEL_TO_DECEL=100

[gcode_macro LUBRICATE_RAILS]
gcode:
    {% set ITERATIONS = params.ITERATIONS|default(1)|int %}
    {% set SPEED_MM_S = params.SPEED|default(500)|float %}
    {% set SPEED_MM_MIN = SPEED_MM_S * 60 %}

    HOME_IF_NEEDED
    # Raise Z to safe starting height (10mm above bed)
    G1 Z10 F3000

    {% for i in range(ITERATIONS) %}
        M117 Lubricating rails, iteration {i + 1} of {ITERATIONS}...
        RESPOND MSG="Lubricating rails, iteration {i + 1} of {ITERATIONS}..."

        # Start at X0 Y0 Z10
        G1 X0 Y0 Z10 F{SPEED_MM_MIN}

        # Three diagonal X-Y movements at Z10
        G1 X350 Y350 Z10 F{SPEED_MM_MIN}  # Diagonal: bottom-left to top-right
        G1 X0 Y350 Z10 F{SPEED_MM_MIN}    # Diagonal: top-right to top-left
        G1 X350 Y0 Z10 F{SPEED_MM_MIN}    # Diagonal: top-left to bottom-right

        # Diagonal X-Y with Z down to 350
        G1 X0 Y0 Z350 F3000               # Diagonal: bottom-right to bottom-left, Z to 350

        # Diagonal X-Y with Z up to 10
        G1 X350 Y350 Z10 F3000            # Diagonal: bottom-left to top-right, Z to 10

        # Trace the four edges of the X-Y plane
        G1 X350 Y0 Z10 F{SPEED_MM_MIN}    # Edge: top-right to bottom-right
        G1 X0 Y0 Z10 F{SPEED_MM_MIN}      # Edge: bottom-right to bottom-left
        G1 X0 Y350 Z10 F{SPEED_MM_MIN}    # Edge: bottom-left to top-left
        G1 X350 Y350 Z10 F{SPEED_MM_MIN}  # Edge: top-left to top-right
    {% endfor %}
