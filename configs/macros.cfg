
# Helper macro for combined status messages
[gcode_macro STATUS_MSG]
gcode:
  {% set MESSAGE = params.MSG|default('')|string %}
  M117 {MESSAGE}
  RESPOND MSG="{MESSAGE}"


[gcode_macro HOME_IF_NEEDED]
description: Homes axes when needed
gcode:
  {% set homed = printer.toolhead.homed_axes %}
  
  {% if "z" not in homed %}
    G28 Z
  {% elif "x" not in homed or "y" not in homed %}
    G28 X Y
  {% else %}
    {action_respond_info("All axes already homed")}
  {% endif %}
[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_BASE
gcode:
    {% set SENSOR = params.SENSOR|default('extruder') %}
    {% set MIN = params.MINIMUM|float %}
    {% set MAX = params.MAXIMUM|default(MIN + 10)|float %}

    {% set is_extruder = ('extruder' in SENSOR) %}
    {% set is_bed = (SENSOR == 'heater_bed') %}
    {% set can_check_target = is_extruder or is_bed %}

    {% set target = 0.0 %}
    {% if can_check_target %}
        {% set target = printer[SENSOR].target|float %}
    {% endif %}

    {% set skip = can_check_target and (target < MIN) %}

    {% if skip %}
        M118 TEMPERATURE_WAIT skipped: MIN={MIN}°C, MAX={MAX}°C; {SENSOR} target is {target|round(1)}°C
    {% else %}
        M118 Waiting for {SENSOR} to reach temperature range: {MIN}°C - {MAX}°C
        TEMPERATURE_WAIT_BASE {rawparams}

        {% if is_extruder or is_bed %}
            _ENSURE_TEMP SENSOR={SENSOR} MIN={MIN} MAX={MAX}
        {% endif %}

        {% if is_extruder and printer[SENSOR].target|float >= 200 %}
            HOME_IF_NEEDED  # just incase because box clean has no home checks
            BOX_NOZZLE_CLEAN
        {% endif %}
    {% endif %}
[gcode_macro _ENSURE_TEMP]
gcode:
    {% if params.SENSOR in printer %}
        {% set current_temp = printer[params.SENSOR].temperature %}
        {% set min_temp = params.MIN|float %}
        {% set max_temp = params.MAX|float %}
        {% set target_temp = printer[params.SENSOR].target %}
        
        {% if current_temp >= min_temp and current_temp <= max_temp %}
            {% set temp_diff = (current_temp - target_temp)|round(1) %}
            M118 Wait complete. Current temperature ({current_temp|round(1)}°C) is within range ({temp_diff} degrees off TARGET). ✅
        {% else %}
            M118 ⚠️WARNING: Wait finished, but temp is OUT OF RANGE! Current: {current_temp|round(1)}°C | Target: {min_temp}°C - {max_temp}°C ⚠️

            {% if 'extruder' in params.SENSOR %}
                M118 Using M109 to set {params.SENSOR} to {target_temp}°C
                M109 S{target_temp}
                M118 M109 complete
            {% elif params.SENSOR == 'heater_bed' %}
                M118 Using M190 to set heater_bed to {target_temp}°C
                M190 S{target_temp}
                M118 M190 complete
            {% endif %}
        {% endif %}
    {% else %}
        M118 Error: Sensor '{params.SENSOR}' not found.
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG
gcode:
    # Set custom values before calibration
    SET_VELOCITY_LIMIT VELOCITY=800 SQUARE_CORNER_VELOCITY=5 ACCEL=15000 ACCEL_TO_DECEL=5000
    # Run bed mesh calibration
    BED_MESH_CALIBRATE_ORIG {rawparams}
    # Set specified values after calibration
    SET_VELOCITY_LIMIT VELOCITY=800 SQUARE_CORNER_VELOCITY=10 ACCEL=30000 ACCEL_TO_DECEL=100

[gcode_macro LUBRICATE_RAILS]
gcode:
    {% set ITERATIONS = params.ITERATIONS|default(1)|int %}
    {% set SPEED_MM_S = params.SPEED|default(500)|float %}
    {% set SPEED_MM_MIN = SPEED_MM_S * 60 %}

    HOME_IF_NEEDED
    # Raise Z to safe starting height (10mm above bed)
    G1 Z10 F3000

    {% for i in range(ITERATIONS) %}
        M117 Lubricating rails, iteration {i + 1} of {ITERATIONS}...
        RESPOND MSG="Lubricating rails, iteration {i + 1} of {ITERATIONS}..."

        # Start at X0 Y0 Z10
        G1 X0 Y0 Z10 F{SPEED_MM_MIN}

        # Three diagonal X-Y movements at Z10
        G1 X350 Y350 Z10 F{SPEED_MM_MIN}  # Diagonal: bottom-left to top-right
        G1 X0 Y350 Z10 F{SPEED_MM_MIN}    # Diagonal: top-right to top-left
        G1 X350 Y0 Z10 F{SPEED_MM_MIN}    # Diagonal: top-left to bottom-right

        # Diagonal X-Y with Z down to 350
        G1 X0 Y0 Z350 F3000               # Diagonal: bottom-right to bottom-left, Z to 350

        # Diagonal X-Y with Z up to 10
        G1 X350 Y350 Z10 F3000            # Diagonal: bottom-left to top-right, Z to 10

        # Trace the four edges of the X-Y plane
        G1 X350 Y0 Z10 F{SPEED_MM_MIN}    # Edge: top-right to bottom-right
        G1 X0 Y0 Z10 F{SPEED_MM_MIN}      # Edge: bottom-right to bottom-left
        G1 X0 Y350 Z10 F{SPEED_MM_MIN}    # Edge: bottom-left to top-left
        G1 X350 Y350 Z10 F{SPEED_MM_MIN}  # Edge: top-left to top-right
    {% endfor %}





[gcode_macro RESONANCE_TORTURE]
description: Generate vibration patterns for quick resonance testing
gcode:
    {% set pattern = params.PATTERN|default("CORNER")|upper %}
    {% set moves = params.MOVES|default(50)|int %}
    {% set x_center = params.X|default(175)|float %}
    {% set y_center = params.Y|default(175)|float %}
    {% set amplitude = params.AMP|default(10)|float %}
    {% set speed_mms = params.SPEED|default(50)|float %}
    {% set speed_mmm = speed_mms * 60 %}
    
    # Save current position
    SAVE_GCODE_STATE NAME=RESONANCE_STATE
    
    # Absolute positioning
    G90
    
    # Move to starting position
    G1 X{x_center} Y{y_center} F{speed_mmm}
    
    {% if pattern == "CORNER" %}
        # Brutal corner infill simulation - diagonal oscillation
        {% for i in range(moves) %}
            {% if i % 2 == 0 %}
                G1 X{x_center + amplitude} Y{y_center + amplitude} F{speed_mmm}
            {% else %}
                G1 X{x_center - amplitude} Y{y_center - amplitude} F{speed_mmm}
            {% endif %}
        {% endfor %}
        
    {% elif pattern == "CROSS" %}
        # Cross pattern - alternating X/Y torture
        {% for i in range(moves) %}
            {% set phase = i % 4 %}
            {% if phase == 0 %}
                G1 X{x_center + amplitude} Y{y_center} F{speed_mmm}
            {% elif phase == 1 %}
                G1 X{x_center} Y{y_center + amplitude} F{speed_mmm}
            {% elif phase == 2 %}
                G1 X{x_center - amplitude} Y{y_center} F{speed_mmm}
            {% else %}
                G1 X{x_center} Y{y_center - amplitude} F{speed_mmm}
            {% endif %}
        {% endfor %}
        
    {% elif pattern == "SQUARE" %}
        # Rapid square corners - frame torture
        {% for i in range(moves // 4) %}
            G1 X{x_center + amplitude} Y{y_center + amplitude} F{speed_mmm}
            G1 X{x_center - amplitude} Y{y_center + amplitude} F{speed_mmm}
            G1 X{x_center - amplitude} Y{y_center - amplitude} F{speed_mmm}
            G1 X{x_center + amplitude} Y{y_center - amplitude} F{speed_mmm}
        {% endfor %}
        
    {% elif pattern == "ZIGZAG" %}
        # Aggressive zigzag - linear oscillation
        {% for i in range(moves) %}
            {% if i % 2 == 0 %}
                G1 X{x_center + amplitude} Y{y_center + ((i % 4 - 2) * amplitude / 2)} F{speed_mmm}
            {% else %}
                G1 X{x_center - amplitude} Y{y_center + ((i % 4 - 2) * amplitude / 2)} F{speed_mmm}
            {% endif %}
        {% endfor %}
        
    {% elif pattern == "CHAOS" %}
        # Chaotic pattern - pseudo-random brutal moves
        {% for i in range(moves) %}
            {% set x_mult = ((i * 7 + 3) % 13 - 6) / 6.0 %}
            {% set y_mult = ((i * 11 + 5) % 17 - 8) / 8.0 %}
            G1 X{x_center + amplitude * x_mult} Y{y_center + amplitude * y_mult} F{speed_mmm}
        {% endfor %}
        
    {% else %}
        {action_respond_info("Unknown pattern: %s" % pattern)}
        {action_respond_info("Available: CORNER, CROSS, SQUARE, ZIGZAG, CHAOS")}
    {% endif %}
    
    # Return to center
    G1 X{x_center} Y{y_center} F{speed_mmm}
    
    # Restore state
    RESTORE_GCODE_STATE NAME=RESONANCE_STATE